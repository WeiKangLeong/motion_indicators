#include <ros/ros.h>
// PCL specific includes
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <nav_msgs/Path.h>

ros::Publisher pub;

nav_msgs::Path stored_route;

std::vector<std::vector<int>* >* path_;

void store_path (const nav_msgs::Path path_in)
{
    stored_route = path_in;
    
    int path_fraction = stored_route.poses.size();
    
    for (int i=0; i<path_fraction; i++)
    {
        
    }
}

void 
cloud_cb (const sensor_msgs::PointCloud2ConstPtr& input)
{
  // Create a container for the data.
  sensor_msgs::PointCloud2 output;

  // Do data processing here...
  output = *input;

  // Publish the data.
  pub.publish (output);
}

int
main (int argc, char** argv)
{
  // Initialize ROS
  ros::init (argc, argv, "my_pcl_tutorial");
  ros::NodeHandle nh;

  // Create a ROS subscriber for the input point cloud
  ros::Subscriber sub = nh.subscribe ("input", 1, cloud_cb);
  ros::Subscriber sub_path = nh.subscribe ("route_path", 1, store_path);

  // Create a ROS publisher for the output point cloud
  pub = nh.advertise<sensor_msgs::PointCloud2> ("output", 1);
  
  path_ = new std::vector<std::vector<int>* >;

  // Spin
  ros::spin ();
}

